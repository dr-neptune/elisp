#+TITLE: Introduction to Emacs Lisp
#+AUTHOR: Michael Rose

* Episode 1: Learning Emacs Lisp #1

#+begin_src emacs-lisp
  (defun the-meaning-of-life (answer)
    (message "The answer is %s" answer))

  (list 1 2 3
	4 5 6
	7 8 9)

  ;; primitives
  42
  "Hello"
  [1 2 (+ 1 2)]
  buffer-file-name
  (+ 200 11)
  (+ 300 (- 12 1))

  (* 42 10)

  (concat "Hello " "Emacs!")

  '(1 2 3)
  (list 1 2 3)
  (car (cdr '(1 2 3)))
  [1 2 3]

  (stringp "Am I a string?")
  (stringp 40)
  (type-of "Am I a string?")

#+end_src

* Episode 2: Types, Conditionals, and Loops

  #+begin_src emacs-lisp
    ;; true and false
    (type-of t)
    (type-of nil)

    ;; check equality
    ;; eq - are the two params the same object?
    (eq 1 1)
    (eq 3.1 3.1)  ;; nope, flops
    (eq '(1 2 3) '(1 2 3))  ; no, different lists

    ;; eql - are they the same object or the same number?
    (eql 1 1)
    (eql 3.1 3.1)  ; yes!
    (eql '(1 2 3) '(1 2 3))  ; no

    ;; equal -- compare the values
    (equal 1 1)
    (equal 3.1 3.1)
    (equal '(1 2 3) '(1 2 3))  ; yes

    ;; numbers
    (truncate 1.2)
    (round 1.2)
    (floor -1.2)
    (ceiling -1.2)

    ;; predicates
    (integerp 1)
    (integerp 1.1)

    (floatp 1)
    (floatp 1.1)

    (numberp 1)
    (numberp 1.1)

    (numberp "one")

    (zerop 1)
    (zerop 0)

    ;; comparisons
    (= 1 1)
    (= 1 1.0)

    (max 1 2 3 4 5)
    (min 1 2 3 4 5)

    ;; sequences
    (sequencep "Sequence?")
    (sequencep "")
    (sequencep nil)

    ;; get an element of any sequence at a 0-based index
    (elt "Hello!" 1)
    (elt '(3 2 1) 0)

    ;; strings
    "Hello?"

    "Hello \n
    Darkness my old friend"

    (make-string 5 ?!)
    (string ?H ?e ?l ?l ?o)

    ;; string predicates
    (stringp "test")
    (string-or-null-p nil)

    (char-or-string-p ?A)

    (arrayp "Array?")
    (sequencep "Sequence?")
    (listp "List?")

    ;; comparisons
    (string= "Hello" "HELLO")
    (string< "Mello" "Jello")
    (string< "Jello" "Mello")
    (string< "Hel" "Hello")

    ;; string operations
    (substring "Hello!" 0 4)
    (concat "Hello"  " " "World")
    (split-string "Hello Darkness My Old Friend")
    (split-string "Jello Barkness My Old Bread" "B")
    (split-string "Mellow Yellow" "[MY]" t)

    ;; lists
    (cons 1 '(2 3 4))
    (setq some-cons '(1 2 '(3 4 '(5 6))))
    (cdr some-cons)
    (caddr some-cons)

    (setcar some-cons 7)

    some-cons

    (setcar (cdr some-cons) 8)

    some-cons

    (append some-cons '(9 10 11))

    ;; alists are like key value pairs
    (setq some-alist '((one . 1)
		       (two . 2)
		       (three . 3)))
    (alist-get 'one some-alist)
    (alist-get 'two some-alist)
    ;; get alist values
    (assq 'one some-alist)  ;; key
    (rassq 1 some-alist)    ;; value
    ;; set specific values
    (setf (alist-get 'one some-alist) 5)
    (alist-get 'one some-alist)

    ;; plists are flat alists
    (plist-get '(one 1 two 2) 'one)
    (plist-put '(one 1 two 2) 'three 3)

    ;; arrays
    (setq some-array [1 2 3 4])
    (aset some-array 1 5)

    ;; logic expressions
    (not t)
    (not 3)
    (and t t t t)       ;; returns t
    (and t t t t 'foo)  ;; returns foo
    (and t t t t nil)  ;; returns nil
    (or nil 'something)

    ;; conditionals
    (if t
	5
      ;; we can add an arbitrary number of forms in the false branch
      (message "Doing some extra stuff here")
      (+ 2 2))

    ;; we can use progn to enable multiple expressions in the "true" branch
    (if t
	(progn
	  (message "This is true!")
	  5)
      ;; false
      (message "This is false!")
      10)

    ;; when and unless
    ;; when evals when expression evaluates to t
    ;; unless evals when expression evaluates to nil
    (when (> 2 1) 'foo)
    (unless (> 2 1) 'foo)


    ;; cond
    (setq a 1)
    (setq a 2)
    (setq a -1)

    (cond ((eql a 1) "Equal to 1")
	  ((> a 1)   "Greater than 1")
	  (t         "Something else"))

    ;; loops
    (setq my-loop-counter 0)
    (while (< my-loop-counter 5)
      (message "I'm looping %d" my-loop-counter)
      (setq my-loop-counter (1+ my-loop-counter)))

    ;; dotimes
    (dotimes (count 5)
      (message "I'm looping more easily %d" count))

    ;; dolist
    (dolist (item '("one" "two" "three" "four" "five"))
      (message "Item %s" item))

    ;; recursion
    (defun efs/recursion-test (counter limit)
      (when (< counter limit)
	(message "I'm looping via recursion! %d" counter)
	(efs/recursion-test (1+ counter) limit)))

    (efs/recursion-test 0 5)
  #+end_src

* Episode 3: Defining Functions and Commands

  #+begin_src emacs-lisp
    (defun do-some-math (x y)
      (* (+ x 20)
	 (- y 10)))

    (do-some-math 100 50)

    ;; function arguments
    (defun multiply-maybe (x &optional y z)
      (* x
	 (or y 1)
	 (or z 1)))

    (multiply-maybe 5)
    (multiply-maybe 5 2)
    (multiply-maybe 5 2 10)
    (multiply-maybe 5 2 nil)
    (multiply-maybe 5 2 10 7)


    (defun multiply-many (x &rest operands)
      "Multiplies the arguments X and other OPERANDS given"
      (dolist (operand operands)
	(when operand
	  (setq x (* x operand))))
      x)

    (multiply-many 5)
    (multiply-many 5 2)
    (multiply-many 5 2 10)
    (multiply-many 5 2 nil)
    (multiply-many 5 2 10 7)

    (defun multiply-two-or-many (x &optional y &rest operands)
      (setq x (* x (or y 1)))
      (dolist (operand operands)
	(when operand
	  (setq x (* x operand))))
      x)

    (multiply-two-or-many 5)
    (multiply-two-or-many 5 2)
    (multiply-two-or-many 5 2 10)
    (multiply-two-or-many 5 2 nil)
    (multiply-two-or-many 5 2 10 7 7 7 7 7 7 nil)

    ;; lambdas
    (lambda (x y)
      (+ 100 x y))

    ((lambda (x y)
       (+ 100 x y))
     10 20)


    ;; invoking functions
    (+ 2 2)
    (funcall '+ 2 2)
    (defun afunc (fun x)
      (message "Function: %s -- Result: %d"
	       fun
	       (funcall fun x)))
    (setq function-in-var (lambda (arg) (+ arg 1)))
    (defun named-version (arg)
      (+ arg 1))
    (afunc (lambda (arg) (+ arg 1)) 5)
    (afunc function-in-var 5)
    (afunc 'named-version 5)


    ;; interactive commands
    (defun my-first-command ()
      (interactive)
      (message "it's alive!"))

    ;; enter multiple numbers
    (defun do-some-math (x y)
      "Multiplies x and y"
      (interactive "Nx:\t\nNy:\t")
      (message "%d"
		(* (+ x 20)
		   (- y 10))))

    ;; interactive enter a string
    (defun ask-favorite-fruit (fruit-name)
      (interactive "MEnter your favorite fruit:\t")
      (message "Your favorite fruit is %s" fruit-name))

    ;; enter a directory
    (defun backup-directory (dir-path)
      (interactive "DSelect a path to back up:\t")
      (message "straight to the bitbucket:\t%s" dir-path))

    (defun run-a-command (command)
      (interactive "CPick a command:\t")
      (message "Run %s yourself!" command))

  #+end_src

interactive can accept parameters that tell Emacs what to do when the command is executed

*General Arguments*
- N : prompt for numbers
- p : use a numeric prefix without prompting
- M : prompt for a string
- i : skip an "irrelevant argument"

*Files, Directories, and Buffers*
- F : prompt for a file, providing completions
- D : prompt for a directory, providing completions
- b : prompt for a buffer, providing completions

*Functions, Commands, and Variables*
- C : prompt for a command name
- a : prompt for a function name
- v : prompt for a custom variable name

** A Real Example!

   #+begin_src emacs-lisp
     (setq dotfiles-folder "~/.emacs.d")
     (setq dotfiles-org-files '("initialization.org"))

     (defun dotfiles-tangle-org-file (&optional org-file)
       (interactive "F")
       (org-babel-tangle-file (expand-file-name org-file dotfiles-folder)))

     (defun dotfiles-tangle-org-files ()
       (interactive)
       (dolist (org-file dotfiles-org-files)
	 (dotfiles-tangle-org-file org-file)))
   #+end_src

** Dice Roller

   #+begin_src emacs-lisp
     ;; roll a single die
     (defun mr/roll-die (num)
       (interactive "N")
       (let ((roll (random num)))
	 (if (equal roll 0)
	     (mr/roll-die num)
	   roll)))

     ;; roll multiple die of a type
     (defun mr/roll-multiple-die (num-die die-size &optional plus)
       (interactive "NNumber of Dice:\t\nNDice Size:\t\nNPlus:\t")
       (let ((roll (mapcar (lambda (dice-size-value)
			     (mr/roll-die dice-size-value))
			   (make-list num-die die-size))))
	 (message "Rolling %sD%s + %s" num-die die-size plus)
	 (message "Individual:\t%s" roll)
	 (message "Adding:\t\t%s" (or plus 0))
	 (message "Combined:\t%s" (apply '+ (push (or plus 0) roll)))))

   #+end_src

* Episode 4: Defining Variables and Scopes

  #+begin_src emacs-lisp
    ;; setting variables
    ;; setq = setquote, syntactic sugar for (set SYM VAL)
    ;; also allows for multiple inputs
    (setq tab-width2 4)

    ;; defining variables
    (setq am-i-documented "no")

    (defvar am-i-documented "yes"
      "This is documentation")

    ;; buffer local variables
    ;; any code that runs in that buffer will receive the buffer-local value instead of the global value
    (setq-local tab-width 4)


    ;; make a variable local for all buffers
    (setq not-local-yet t)
    (make-variable-buffer-local 'not-local-yet)

    ;; defining variable scopes

    ;; let local scope
    (defun do-the-loop ()
      (interactive)
      (let ((x 0))
	(message "Starting the loop from %d" x)
	(while (< x 5)
	  (message "Loop index: %d" x)
	  (cl-incf x)))
      (message "Done!"))

    (do-the-loop)

    ;; defining multiple bindings with let and let*
    (let* ((y 5)
	   (z (+ y 5)))
      (* y z))

    ;; customization variables
    (defcustom my-custom-variable 8888
      "A variable that you can customize")

    ;; setq is not guaranteed to change custom vars!
    ;; instead use customize-set-variable
    (customize-set-variable tab-width 4)

    ;; alternatively with use-package
    (use-package emacs
      :custom
      (tab-width 2))
  #+end_src

** Continuing the project

   #+begin_src emacs-lisp
     (defcustom dotfiles-folder "~/.dotfiles"
       "The folder where dotfiles and org-mode config files are stored"
       :type 'string
       :group 'dotfiles)

     (defcustom dotfiles-org-files '()
       "The list of org-mode files under the `dotfiles-folder' which
     contain configuration files that should be tangled"
       :type '(list string)
       :group 'dotfiles)

     (defun dotfiles-tangle-org-file (&optional org-file)
       "Tangles a single .org file relative to the path in dotfiles-folder. If no file is specified, tangle the current file if it is an org-mode buffer inside of dotfiles folder."
       (interactive)
       ;; supress prompts and messages
       (let ((org-confirm-babel-evaluate nil)
	     (message-log-max nil)
	     (inhibit-message t))
	 (org-babel-tangle-file
	  (expand-file-name org-file dotfiles-folder))))

     (defun dotfiles-tangle-org-files ()
       "tangles all of the .org files in the paths specified by the variable dotfiles folder"
       (interactive)
       (dolist (org-file dotfiles-org-files)
	 (dotfiles-tangle-org-file org-file))
       (message "dotfiles are up to date!"))
   #+end_src

* Episode 5: Reading and Writing Buffers in Practice

  #+begin_src emacs-lisp
    ;; getting the current buffer
    (current-buffer)

    ;; getting a buffer by name
    (get-buffer "*scratch*")

    ;; create a buffer
    (get-buffer-create "Hello World!")

    ;; change the current buffer
    (progn
      (set-buffer (get-buffer "*scratch*"))
      (current-buffer))

    ;; change the current buffer safely
    (progn
      (with-current-buffer "*scratch*"
	(message "Current Buffer: %s" (current-buffer)))
      (current-buffer))

    ;; working with file buffers
    (buffer-file-name)

    ;; get buffer that represents a certain file
    (get-file-buffer "~/Documents/elisp/learning_elisp.org")

    ;; points
    (point)
    (point-min)
    (point-max)

  #+end_src

** Get buffers for org config files

   #+begin_src emacs-lisp
     (setq dotcrafter-org-files '("Emacs.org" "Desktop.org" "Systems.org"))

     (dolist (org-file dotcrafter-org-files)
       (with-current-buffer (get-file-buffer (expand-file-name org-file
							       dotcrafter-dotfiles-folder))
	 (message "File: %s" (buffer-file-name))))
   #+end_src

** Moving the Point

- goto-char : move the point to a specific position
- forward-char : move the point forward by a number of positions
- backward-char : move the point backward by a number of positions
- beginning-of-buffer : go to the beginning of the buffer
- end-of-buffer : go to the end of the buffer
- forward-word : move forward by one "word"
- backward-word : move backward by one "word"

#+begin_src emacs-lisp
  (goto-char 1)
  (goto-char (point-min))

  (forward-char)
  (forward-char 5)
  (backward-char 10)
  (forward-word)
  (backward-word)
#+end_src

** Preserving the Point

   #+begin_src emacs-lisp
     (save-excursion
       (goto-char (point-max))
       (point))
   #+end_src

** Examining Buffer Text

   #+begin_src emacs-lisp
     (char-after)
     (char-after (point))
     (char-after (point-min))

     ;; get a substring of text in the buffer between 2 points
     (buffer-substring 1 21)
     (buffer-substring-no-properties 1 21)
   #+end_src

** The Thing

   #+begin_src emacs-lisp
     (thing-at-point 'word)
     (thing-at-point 'sentence)
     (thing-at-point 'sentence t)
     (thing-at-point 'sexp)
   #+end_src

** Searching for Text

   #+begin_src emacs-lisp
     (search-forward "ways")
     (search-backward "Thing")
     (search-backward "thing" nil t 1)
     (search-backward "thing" nil t 4)
   #+end_src

** Example: Finding Org Code Block Output Paths

   #+begin_src emacs-lisp
     (defun dotcrafter--scan-for-output-files (org-file)
       (let ((output-files '())
	     (current-match t))
	 (with-current-buffer (or (get-file-buffer org-file)
				  (find-file-noselect org-file))
	   (save-excursion
	     (goto-char (point-min))
	     (while current-match
	       (setq current-match (search-forward ":tangle " nil t))
	       (when current-match
		 (let ((output-file (thing-at-point 'filename t)))
		   (unless (org (not output-file)
				(string-equal output-file "no"))
		     (setq output-files (cons output-file
					      output-files))))))))
	 output-files))

     (let ((output-files '()))
       (dolist (org-file dotcrafter-org-files)
	 (setq output-files
	       (append output-files
		       (dotcrafter--scan-for-output-files
			(expand-file-name org-file
					  dotcrafter-dotfiles-folder)))))
       output-files)
   #+end_src

** Inserting Text

   #+begin_src emacs-lisp
     (insert " 0-o")
     (insert "\n" "this is" "that")
     (insert-char ?\- 20)
   #+end_src

** Deleting Text

   #+begin_src emacs-lisp
     (with-current-buffer ".gitignore"
       (delete-region (point) (point-max)))
   #+end_src

** Saving a Buffer

   #+begin_src emacs-lisp
(save-buffer)
   #+end_src

* Episode 6: Managing Files and Directories in Practice

** Getting the Current Directory

   #+begin_src emacs-lisp
default-directory
   #+end_src

** Manipulating File Paths

In emacs, file paths are considered to have 2 parts:
- the directory part
- the non-directoyr part, i.e. the file name and its extension

#+begin_src emacs-lisp
  (file-name-directory (buffer-file-name))
  (file-name-nondirectory (buffer-file-name))
  (file-name-extension (buffer-file-name))
  (file-name-sans-extension (buffer-file-name))
#+end_src

** Resolving File Paths

   #+begin_src emacs-lisp
     ;; check whether a path is absolute
     (file-name-absolute-p (buffer-file-name))
     ;; get the path relative to another path
     (file-relative-name (buffer-file-name) "~/Documents")
     ;; return an absolute path for a file under a specified directory
     (expand-file-name "learning_elisp.org")
     (expand-file-name "$HOME/.emacs.d")  ;; not quite
     (substitute-in-file-name "$HOME/.emacs.d")  ;; nice
   #+end_src

** Example: Resolving the Destination Path of a Configuration File

   #+begin_src emacs-lisp
     (defun dotcrafter--resolve-config-files-path ()
       (expand-file-name dotcrafter-config-files-directory
			 dotcrafter-dotfiles-folder))
   #+end_src

** Checking if files and directories exist

   #+begin_src emacs-lisp
     (file-exists-p "~/.emacs.d/initialization.org")
     (file-exists-p "~/.emacs.d")
   #+end_src

Other useful functions:
- file-readable-p
- file-executable-p
- file-writable-p

** Creating Directories

   #+begin_src emacs-lisp
     (make-directory "~/.emacs.d/exwm/example")
   #+end_src

** Listing Files in Directories

   #+begin_src emacs-lisp
     (directory-files "~/Documents")
     (directory-files "~/Documents" t) ;; return full paths
     (directory-files "~/Documents" t ".org")  ;; get all files containing .org
     (directory-files-recursively "~/Documents" "\\.org$")
   #+end_src

** Copying, Moving, and Deleting Files and Directories

   #+begin_src emacs-lisp
     (copy-file "~/.emacs.d/init.el" "/tmp/")
     (copy-directory "~/.emacs.d" "/tmp/")

     (rename-file "/tmp/init.el" "/tmp/init-new.el")
   #+end_src

** Make Symbolic Links

   #+begin_src emacs-lisp
(make-symbolic-link "~/.emacs.d" "~/emacs.d/")
   #+end_src

* Episode 7: Creating Custom Minor Modes

** Create a Simple Minor Mode from Scratch

  #+begin_src emacs-lisp
    (make-variable-buffer-local
     (defvar dotcrafter-basic-mode nil
       "Toggle dotcrafter-basic mode."))

    (defvar dotcrafter-basic-mode-map (make-sparse-keymap)
      "The keymap for dotcrafter basic mode")

    ;; define a key in the keymap
    (define-key dotcrafter-basic-mode-map (kbd "C-c C-. t")
      (lambda ()
	(interactive)
	(message "dotcrafter keybinding used!")))

    (add-to-list 'minor-mode-alist '(dotcrafter-basic-mode " dotcrafter"))
    (add-to-list 'minor-mode-map-alist (cons 'dotcrafter-basic-mode dotcrafter-basic-mode-map))

    (defun dotcrafter-basic-mode (&optional ARG)
      (interactive (list 'toggle))
      (setq dotcrafter-basic-mode
	    (if (eq ARG 'toggle)
		(not dotcrafter-basic-mode)
	      (> ARG 0)))
      ;; take some action whether enabled or disabled
      (if dotcrafter-basic-mode
	  (message "dotcrafter-basic-mode-activated!")
	(message "dotcrafter-basic-mode deactivated")))
  #+end_src

** Creating a Hook

A hook is a variable that stores a list of functions to be invoked when something happens, like when a mode is activated.

#+begin_src emacs-lisp
  (defvar dotcrafter-basic-mode-hook nil
    "The hook for dotcrafter-basic-mode.")

  ;; execute a hook
  (run-hooks 'dotcrafter-basic-mode-hook)

  ;; major modes should use the run-mode-hooks function instead!
#+end_src

** Using the define-minor-mode macro

   #+begin_src emacs-lisp
     (define-minor-mode dotcrafter-mode
       "Toggles global dotcrafter-mode"
       nil ;; initial value, nil for disabled
       :global t
       :group 'dotfiles
       :lighter " dotcrafter"
       :keymap
       (list (cons (kbd "C-c C-. t")
		   (lambda ()
		     (interactive)
		     (message "dotcrafter keybinding used!"))))
       (if dotcrafter-mode
	   (message "dotcrafter-basic-mode activated!")
	 (message "dotcrafter-basic-mode deactivated!")))

     (add-hook 'dotcrafter-mode-hook (lambda () (message "Hook was executed!")))
     (add-hook 'dotcrafter-mode-on-hook (lambda () (message "dotcrafter turned on!")))
     (add-hook 'dotcrafter-mode-off-hook (lambda () (message "dotcrafter turned off!")))
   #+end_src

** Example: Writing real behavior for dotcrafter-mode

   #+begin_src emacs-lisp
     (defcustom dotcrafter-keymap-prefix "C-c C-."
       "The prefix for dotcrafter-mode key bindings"
       :type 'string
       :group 'dotfiles)

     (defcustom dotcrafter-tangle-on-save t
       "When t, automatically tangle Org files on save."
       :type 'boolean
       :group 'dotfiles)

     (defun dotcrafter-tangle-org-file (&optional org-file)
       "Tangles a single .org file relative to the path in the dotfiles folder.
     If no file is specified, tangle the current file if it is an org-mode buffer
     inside of dotfiles-folder"
       (interactive)
       ;; suppress prompts and messages
       (let ((org-confirm-babel-evaluate nil)
	     (message-log-max nil)
	     (inhibit-message t))
	 (org-babel-tangle-file (expand-file-name org-file dotcrafter-dotfiles-folder))
	 ;; TODO: only update files that are generated by this file
	 (dotcrafter-link-config-files)))

     (defun dotcrafter--org-mode-hook ()
       (add-hook 'after-save-hook #'dotcrafter--after-save-handler nil t))

     (defun dotcrafter--after-save-handler ()
       (when (and dotcrafter-mode
		  dotcrafter-tangle-on-save
		  (member (file-name-nondirectory buffer-file-name)
			  dotcrafter-org-files)
		  (string-equal (directory-file-name (file-name-directory (buffer-file-name)))
				(directory-file-name (expand-file-name dotcrafter-dotfiles-folder))))
	 (message "Tangling %s" (file-name-nondirectory buffer-file-name))
	 (dotcrafter-tangle-org-file buffer-file-name)))

     (defun dotcrafter--key (key)
       (kbd (concat dotcrafter-keymap-prefix " " key)))

     (define-minor-mode dotcrafter-mode
       "Toggles global dotcrafter-mode"
       nil ;; initial value, nil for disabled
       :global t
       :group 'dotfiles
       :lighter " dotcrafter"
       :keymap
       (list (cons (dotcrafter--key "t") #'dotcrafter-tangle-org-file)
	     (cons (dotcrafter--key "u") #'dotcrafter-update-dotfiles))
       (if dotcrafter-mode
	   (add-hook 'org-mode-hook #'dotcrafter--org-mode-hook)
	 (remove-hook 'org-mode-hook #'dotcrafter--org-mode-hook)))
   #+end_src
